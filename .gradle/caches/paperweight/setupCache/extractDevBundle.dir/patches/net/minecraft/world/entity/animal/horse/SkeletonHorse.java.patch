--- a/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.animal.horse;
 
+import java.util.Objects;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
@@ -17,6 +18,7 @@
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MobType;
+import net.minecraft.world.entity.ai.attributes.AttributeInstance;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.animal.Animal;
@@ -25,7 +27,12 @@
 import net.minecraft.world.level.LevelAccessor;
 import org.joml.Vector3f;
 
+// CraftBukkit start
+import org.bukkit.event.entity.EntityRemoveEvent;
+// CraftBukkit end
+
 public class SkeletonHorse extends AbstractHorse {
+
     private final SkeletonTrapGoal skeletonTrapGoal = new SkeletonTrapGoal(this);
     private static final int TRAP_MAX_LIFE = 18000;
     private boolean isTrap;
@@ -36,25 +43,23 @@
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return createBaseHorseAttributes().add(Attributes.MAX_HEALTH, 15.0D).add(Attributes.MOVEMENT_SPEED, (double)0.2F);
+        return createBaseHorseAttributes().add(Attributes.MAX_HEALTH, 15.0D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D);
     }
 
     public static boolean checkSkeletonHorseSpawnRules(EntityType<? extends Animal> type, LevelAccessor world, MobSpawnType reason, BlockPos pos, RandomSource random) {
-        if (!MobSpawnType.isSpawner(reason)) {
-            return Animal.checkAnimalSpawnRules(type, world, reason, pos, random);
-        } else {
-            return MobSpawnType.ignoresLightRequirements(reason) || isBrightEnoughToSpawn(world, pos);
-        }
+        return !MobSpawnType.isSpawner(reason) ? Animal.checkAnimalSpawnRules(type, world, reason, pos, random) : MobSpawnType.ignoresLightRequirements(reason) || isBrightEnoughToSpawn(world, pos);
     }
 
     @Override
     protected void randomizeAttributes(RandomSource random) {
-        this.getAttribute(Attributes.JUMP_STRENGTH).setBaseValue(generateJumpStrength(random::nextDouble));
+        AttributeInstance attributemodifiable = this.getAttribute(Attributes.JUMP_STRENGTH);
+
+        Objects.requireNonNull(random);
+        attributemodifiable.setBaseValue(generateJumpStrength(random::nextDouble));
     }
 
     @Override
-    protected void addBehaviourGoals() {
-    }
+    protected void addBehaviourGoals() {}
 
     @Override
     protected SoundEvent getAmbientSound() {
@@ -125,7 +130,7 @@
     public void aiStep() {
         super.aiStep();
         if (this.isTrap() && this.trapTime++ >= 18000) {
-            this.discard();
+            this.discard(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
         }
 
     }
@@ -168,7 +173,7 @@
     @Nullable
     @Override
     public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        return EntityType.SKELETON_HORSE.create(world);
+        return (AgeableMob) EntityType.SKELETON_HORSE.create(world);
     }
 
     @Override
